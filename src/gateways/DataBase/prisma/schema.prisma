generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model acesslevel {
  id        String   @id
  role      String
  descricao String
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user[]
}

model address {
  id        String    @id
  district  String
  country   String
  city      String
  street    String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  company   company[]
}

model candidate {
  id        String   @id
  name      String
  num_bi    String   @unique(map: "Candidate_num_bi_key")
  email     String   @unique(map: "Candidate_email_key")
  phone     Int      @unique(map: "Candidate_phone_key")
  doc       String   @unique(map: "Candidate_doc_key")
  status    String
  dateBirth DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  applications application[]
  interview interview[]
}

model company {
  id        String   @id
  name      String
  email     String   @unique(map: "Company_email_key")
  nif       String   @unique(map: "Company_nif_key")
  phone     Int      @unique(map: "Company_phone_key")
  logo_img  String?  @unique(map: "Company_logo_img_key")
  addressId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  address   address  @relation(fields: [addressId], references: [id], map: "Company_addressId_fkey")
  user      user[]

  @@index([addressId], map: "Company_addressId_fkey")
}

model user {
  id            String     @id 
  name          String
  email         String     @unique(map: "User_email_key")
  password      String
  status        Boolean
  accessLevelId String
  companyId     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  acesslevel    acesslevel @relation(fields: [accessLevelId], references: [id], map: "User_accessLevelId_fkey")
  company       company    @relation(fields: [companyId], references: [id], map: "User_companyId_fkey")
  vacancy       vacancy[]
  interview     interview[]

  @@index([accessLevelId], map: "User_accessLevelId_fkey")
  @@index([companyId], map: "User_companyId_fkey")
}

model vacancy {
  id         String    @id @default(cuid())
  requirements String
  category   String
  title      String    @unique(map: "Vacancy_title_key")
  description String?
  status     String
  dateEnd    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  applications application[]
  userId     String
  user       user      @relation(fields: [userId], references: [id], map: "Vacancy_userId_fkey")

  @@index([userId], map: "Vacancy_userId_fkey")
}

model application {
  id          String    @id @default(cuid())
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  candidateId String
  vacancyId   String
  candidate   candidate @relation(fields: [candidateId], references: [id], map: "Application_candidateId_fkey")
  vacancy     vacancy   @relation(fields: [vacancyId], references: [id], map: "Application_vacancyId_fkey")

  @@index([candidateId], map: "Application_candidateId_fkey")
  @@index([vacancyId], map: "Application_vacancyId_fkey")
}

model interview {
  id           String    @id @default(cuid())
  dateTime     DateTime
  status       String
  interviewee  Boolean
  interviewType String
  candidateId  String
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  candidate    candidate @relation(fields: [candidateId], references: [id], map: "Interview_candidateId_fkey")
  user         user      @relation(fields: [userId], references: [id], map: "Interview_userId_fkey")

  @@index([candidateId], map: "Interview_candidateId_fkey")
  @@index([userId], map: "Interview_userId_fkey")
}
